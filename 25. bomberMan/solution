using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'bomberMan' function below.
     *
     * The function is expected to return a STRING_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. STRING_ARRAY grid
     */

    public static List<string> bomberMan(int n, List<string> grid)
    {
                int rows = grid.Count;
        int cols = grid[0].Length;

        // Convert grid to 2D char array
        char[,] board = new char[rows, cols];
        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j < cols; j++)
            {
                board[i, j] = grid[i][j];
            }
        }

        // If n == 1, return initial grid
        if (n == 1) return grid;

        // If n is even, full grid of bombs
        if (n % 2 == 0)
        {
            return Enumerable.Repeat(new string('O', cols), rows).ToList();
        }

        // Compute after 3 seconds and 5 seconds patterns
        char[,] after3 = Explode(board, rows, cols);
        char[,] after5 = Explode(after3, rows, cols);

        // For cycles: 3 and 5 seconds repeat every 4 seconds
        if ((n - 3) % 4 == 0)
            return ToStringList(after3, rows, cols);
        else
            return ToStringList(after5, rows, cols);
    }

    private static char[,] Explode(char[,] grid, int rows, int cols)
    {
        char[,] result = new char[rows, cols];
        for (int i = 0; i < rows; i++)
            for (int j = 0; j < cols; j++)
                result[i, j] = 'O';

        int[] dx = { 0, 0, 1, -1, 0 };
        int[] dy = { 1, -1, 0, 0, 0 };

        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j < cols; j++)
            {
                if (grid[i, j] == 'O')
                {
                    for (int d = 0; d < 5; d++)
                    {
                        int ni = i + dx[d];
                        int nj = j + dy[d];
                        if (ni >= 0 && ni < rows && nj >= 0 && nj < cols)
                        {
                            result[ni, nj] = '.';
                        }
                    }
                }
            }
        }

        return result;
    }

    private static List<string> ToStringList(char[,] grid, int rows, int cols)
    {
        List<string> result = new List<string>();
        for (int i = 0; i < rows; i++)
        {
            char[] line = new char[cols];
            for (int j = 0; j < cols; j++)
                line[j] = grid[i, j];
            result.Add(new string(line));
        }
        return result;
    }

}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        string[] firstMultipleInput = Console.ReadLine().TrimEnd().Split(' ');

        int r = Convert.ToInt32(firstMultipleInput[0]);

        int c = Convert.ToInt32(firstMultipleInput[1]);

        int n = Convert.ToInt32(firstMultipleInput[2]);

        List<string> grid = new List<string>();

        for (int i = 0; i < r; i++)
        {
            string gridItem = Console.ReadLine();
            grid.Add(gridItem);
        }

        List<string> result = Result.bomberMan(n, grid);

        textWriter.WriteLine(String.Join("\n", result));

        textWriter.Flush();
        textWriter.Close();
    }
}
